generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int           @id @default(autoincrement())
  firstname            String
  lastname             String
  email                String        @unique
  password             String
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  // Relations
  wallets              Wallet[]
  orders               Order[]
  transactionsSent     Transaction[] @relation("SentTransactions")
  transactionsReceived Transaction[] @relation("ReceivedTransactions")
}

model Wallet {
  id         Int      @id @default(autoincrement())
  userId     Int
  currencyId Int
  balance    Decimal   @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  // Relations
  user       User     @relation(fields: [userId], references: [id])
  currency   Currency @relation(fields: [currencyId], references: [id])

  @@unique([userId, currencyId]) // Prevent duplicate wallets per currency
}

model Order {
  id          Int           @id @default(autoincrement())
  userId      Int
  currencyId  Int
  status      OrderStatus @default(PENDING)
  amount      Decimal
  price       Decimal
  type        OrderType
  createdAt   DateTime      @default(now())
  // Relations
  user        User          @relation(fields: [userId], references: [id])
  currency    Currency      @relation(fields: [currencyId], references: [id])
  Transaction Transaction[]
}

enum OrderStatus {
  SUCCESS
  PENDING
  FAILED
}

enum OrderType {
  BUY
  SELL
}

model Transaction {
  id         Int      @id @default(autoincrement())
  currencyId Int
  orderId    Int?
  amount     Decimal
  fee        Decimal
  fromUserId Int
  toUserId   Int
  createdAt  DateTime @default(now())
  // Relations
  order      Order?   @relation(fields: [orderId], references: [id])
  currency   Currency @relation(fields: [currencyId], references: [id])
  fromUser   User     @relation("SentTransactions", fields: [fromUserId], references: [id])
  toUser     User     @relation("ReceivedTransactions", fields: [toUserId], references: [id])
}

model Currency {
  id               Int             @id @default(autoincrement())
  fiatCurrencyId   Int?
  cryptoCurrencyId Int?
  isActive         Boolean         @default(true)
  // Relations
  fiatCurrency     FiatCurrency?   @relation(fields: [fiatCurrencyId], references: [id])
  cryptoCurrency   CryptoCurrency? @relation(fields: [cryptoCurrencyId], references: [id])
  wallets          Wallet[]
  orders           Order[]
  transactions     Transaction[]
}

model FiatCurrency {
  id         Int        @id @default(autoincrement())
  name       String
  price      Decimal
  logo       String?
  // Relations
  currencies Currency[]
}

model CryptoCurrency {
  id         Int        @id @default(autoincrement())
  name       String
  price      Decimal
  logo       String?
  // Relations
  currencies Currency[]
}
